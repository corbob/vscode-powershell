steps:
- checkout: self

- pwsh: Write-Host "##vso[build.updatebuildnumber]$env:BUILD_SOURCEBRANCHNAME-$env:BUILD_SOURCEVERSION-$((get-date).ToString("yyyyMMddhhmmss"))"
  displayName: Set Build Name for Non-PR
  condition: ne(variables['Build.Reason'], 'PullRequest')

- pwsh: |
    Get-ChildItem -Path env:
  displayName: Capture environment
  condition: succeededOrFailed()

# TODO: Use modern resources for these variables.
- task: PowerShell@2
  displayName: 'Set environment variables for VSTS (Phase 1)'
  inputs:
    targetType: filePath
    filePath: ./vscode-powershell/tools/releaseBuild/setVstsVariables.ps1

# TODO: Replace this with an upstream trigger.
- task: PowerShell@2
  displayName: 'Find PowerShellEditorServices build'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  inputs:
    targetType: filePath
    filePath: ./vscode-powershell/tools/releaseBuild/findPsesBuild.ps1

- task: DownloadPipelineArtifact@2
  displayName: 'Download Artifacts from PowerShell Editor Services'
  inputs:
    source: specific
    project: '8e2735c1-3674-408a-bcab-87f089ea29d5'
    pipeline: 1056
    preferTriggeringPipeline: true
    runVersion: specific
    runId: '$(PSES_BUILDID)'
    artifact: 'PowerShellEditorServices'
    path: '$(Build.SourcesDirectory)/PowerShellEditorServices/module/'

- pwsh: |
    New-Item -ItemType Directory $(Build.ArtifactStagingDirectory)/vscode-powershell
    Install-Module InvokeBuild -Force
    Invoke-Build Release
  workingDirectory: '$(Build.SourcesDirectory)/vscode-powershell'

- task: PublishTestResults@2
  inputs:
    testRunner: JUnit
    testResultsFiles: '**/test-results.xml'
  condition: succeededOrFailed()

- checkout: ComplianceRepo

- template: EsrpSign.yml@ComplianceRepo
  parameters:
    buildOutputPath: '$(Build.ArtifactStagingDirectory)/vscode-powershell'
    signOutputPath: '$(Build.ArtifactStagingDirectory)/Signed'
    alwaysCopy: true # So publishing works
    certificateId: 'CP-230012' # Authenticode certificate
    useMinimatch: true # This enables the use of globbing
    # NOTE: Code AKA *.vsix files are not signed
    pattern: |
      Install-VSCode.ps1

- template: EsrpScan.yml@ComplianceRepo
  parameters:
      scanPath: $(Build.ArtifactStagingDirectory)/Signed
      pattern: |
        *.vsix

- publish: $(Build.ArtifactStagingDirectory)/Signed
  artifact: vscode-powershell
  displayName: 'Publish signed (and unsigned) artifacts'

- template: script-module-compliance.yml@ComplianceRepo
  parameters:
    # component-governance
    sourceScanPath: '$(Build.SourcesDirectory)/vscode-powershell'
    # credscan
    suppressionsFile: '$(Build.SourcesDirectory)/vscode-powershell/tools/credScan/suppress.json'
    # TermCheck AKA PoliCheck
    targetArgument: '$(Build.SourcesDirectory)/vscode-powershell'
    optionsUEPATH: '$(Build.SourcesDirectory)/vscode-powershell/tools/terms/UserExclusions.xml'
    optionsRulesDBPath: ''
    optionsFTPath: '$(Build.SourcesDirectory)/vscode-powershell/tools/terms/FileTypeSet.xml'
    # tsa-upload
    codeBaseName: 'PowerShell_PowerShellEditorServices_20210201'
    # We don't use any Windows APIs directly, so we don't need API scan
    APIScan: false
